name: Fetch Latest Linux Kernel

on:
  workflow_dispatch: # Allows manual triggering of the workflow from the GitHub UI
  schedule:
    - cron: '0 0 * * 0' # Optional: Runs every Sunday at 00:00 UTC. Adjust as needed.

jobs:
  fetch_kernel:
    runs-on: ubuntu-latest # Uses the latest Ubuntu GitHub-hosted runner

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # Clones your GitHub repository to the runner.
        with:
          fetch-depth: 0 # Fetches the entire history, necessary for checking existing branches.

      - name: Get Latest Kernel Version
        id: get_version # Assigns an ID to this step to access its outputs
        run: |
          # Find the latest stable kernel tag (e.g., v6.x.y)
          # 'ls-remote' queries the remote repository without cloning it, saving time.
          # We sort by version and grep for standard 'vX.Y.Z' tags to ensure stability.
          LATEST_TAG=$(git ls-remote --tags --sort="-v:refname" https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git | grep -E 'refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 | sed 's/.*refs\/tags\///')
          
          if [ -z "$LATEST_TAG" ]; then
            echo "Error: Could not find a recent kernel tag."
            exit 1
          fi

          echo "Latest kernel tag found: $LATEST_TAG"
          
          # Create a branch name from the tag (e.g., linux-kernel-v6.9.1)
          BRANCH_NAME="linux-kernel-${LATEST_TAG}"
          echo "Branch name will be: $BRANCH_NAME"

          # Check if this branch already exists in your GitHub repository
          # 'git ls-remote --exit-code' checks if the remote branch exists.
          if git ls-remote --exit-code --heads origin "$BRANCH_NAME"; then
            echo "Branch '${BRANCH_NAME}' already exists. Skipping further steps."
            echo "skip_commit_and_push=true" >> "$GITHUB_OUTPUT" # Set output to skip subsequent steps
          else
            echo "Branch '${BRANCH_NAME}' does not exist. Proceeding."
            echo "skip_commit_and_push=false" >> "$GITHUB_OUTPUT" # Set output to proceed
          fi
          
          # Set outputs for subsequent steps
          echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"
          echo "branch_name=$BRANCH_NAME" >> "$GITHUB_OUTPUT"

      - name: Create and Checkout New Branch
        # This step only runs if the 'skip_commit_and_push' output from the previous step is 'false'.
        if: steps.get_version.outputs.skip_commit_and_push == 'false'
        run: |
          # Configure Git user for the commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create and switch to the new branch
          git checkout -b ${{ steps.get_version.outputs.branch_name }} || { echo "Error: Failed to create or checkout new branch."; exit 1; }
          echo "New branch '${{ steps.get_version.outputs.branch_name }}' created and checked out."

      - name: Download Kernel Source and Commit
        # This step also only runs if the branch was newly created.
        if: steps.get_version.outputs.skip_commit_and_push == 'false'
        run: |
          KERNEL_TAG="${{ steps.get_version.outputs.latest_tag }}"
          BRANCH_NAME="${{ steps.get_version.outputs.branch_name }}"
          KERNEL_DIR="linux-kernel-${KERNEL_TAG}" # Directory to store the kernel source

          echo "Downloading kernel source for tag '$KERNEL_TAG'..."
          # Clone the specific tag of the kernel into a new directory.
          # '--depth 1' clones only the latest commit for the tag, saving time and space.
          git clone --depth 1 --branch "$KERNEL_TAG" https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git "$KERNEL_DIR" || { echo "Error: Failed to clone kernel repository."; exit 1; }
          echo "Kernel source downloaded to $KERNEL_DIR."

          # Add the newly cloned kernel folder to Git's staging area.
          git add "$KERNEL_DIR" || { echo "Error: Failed to add '$KERNEL_DIR' to Git."; exit 1; }

          # Create a commit. The '|| echo' prevents failure if there are no changes (e.g., if re-running after an aborted workflow).
          git commit -m "Add Linux Kernel $KERNEL_TAG" || echo "No changes to commit (already up-to-date)."

          echo "Pushing new branch '${BRANCH_NAME}' to GitHub repository..."
          git push origin "$BRANCH_NAME" || { echo "Error: Failed to push branch."; exit 1; }
          echo "Branch pushed successfully."

      - name: Create GitHub Release
        # This step runs only if a new branch was successfully pushed.
        if: steps.get_version.outputs.skip_commit_and_push == 'false'
        uses: softprops/action-gh-release@v2 # Uses a community action to create a GitHub Release
        with:
          tag_name: ${{ steps.get_version.outputs.latest_tag }} # The release tag will be the kernel version
          name: Linux Kernel ${{ steps.get_version.outputs.latest_tag }}
          body: |
            New Linux Kernel release ${{ steps.get_version.outputs.latest_tag }} from git.kernel.org/torvalds/linux.git.
            This release contains the source code of Linus Torvalds' official Linux kernel.
            
            Original Tag: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tag/?h=${{ steps.get_version.outputs.latest_tag }}
          draft: false # Set to true if you want to review before publishing
          prerelease: false # Set to true for release candidates or beta versions

      - name: Cleanup (Optional)
        # This step always runs, regardless of previous step failures, to clean up.
        if: always()
        run: |
          KERNEL_TAG="${{ steps.get_version.outputs.latest_tag }}"
          KERNEL_DIR="linux-kernel-${KERNEL_TAG}"
          if [ -d "$KERNEL_DIR" ]; then
            echo "Cleaning up temporary kernel download folder '$KERNEL_DIR'."
            rm -rf "$KERNEL_DIR"
          fi
